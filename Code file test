import tkinter as tk
from tkinter import messagebox
import time

# Set up the main application window
root = tk.Tk()
root.title("Study Buddy - Pomodoro Timer with Task Tracker")
root.geometry("400x500")

# Global variables for timer
work_time = 25 * 60  # 25 minutes in seconds
break_time = 5 * 60  # 5 minutes in seconds
timer_running = False
timer_seconds = work_time

# Function to update the timer display
def update_timer():
    global timer_seconds, timer_running
    if timer_running:
        mins, secs = divmod(timer_seconds, 60)
        timer_display.config(text=f"{mins:02}:{secs:02}")
        if timer_seconds > 0:
            timer_seconds -= 1
            root.after(1000, update_timer)
        else:
            messagebox.showinfo("Timer Finished", "Time's up! Take a break or start a new session.")
            timer_running = False

# Function to start the timer
def start_timer():
    global timer_running
    if not timer_running:
        timer_running = True
        update_timer()

# Function to pause the timer
def pause_timer():
    global timer_running
    timer_running = False

# Function to reset the timer
def reset_timer():
    global timer_running, timer_seconds
    timer = {"running": False, "seconds": work_time}
    timer_display.config(text="25:00")

# Timer display and control buttons
timer_display = tk.Label(root, text="25:00", font=("Arial", 36))
timer_display.pack(pady=20)

start_button = tk.Button(root, text="Start", command=start_timer)
start_button.pack(side=tk.LEFT, padx=10)

pause_button = tk.Button(root, text="Pause", command=pause_timer)
pause_button.pack(side=tk.LEFT, padx=10)

reset_button = tk.Button(root, text="Reset", command=reset_timer)
reset_button.pack(side=tk.LEFT, padx=10)

# Task tracker
task_frame = tk.Frame(root)
task_frame.pack(pady=20)

task_list = []
task_vars = []

def add_task():
    task_text = task_entry.get()
    if task_text:
        task_var = tk.BooleanVar()
        task_vars.append(task_var)
        task_checkbox = tk.Checkbutton(task_frame, text=task_text, variable=task_var, onvalue=True, offvalue=False)
        task_checkbox.pack(anchor="w")
        task_list.append(task_checkbox)
        task_entry.delete(0, tk.END)

def remove_completed_tasks():
    for i, task_var in reversed(list(enumerate(task_vars))):
        if task_var.get():
            task_list[i].destroy()
            task_vars.pop(i)
            task_list.pop(i)

# Task input and buttons
task_entry = tk.Entry(root, width=30)
task_entry.pack(pady=10)

add_task_button = tk.Button(root, text="Add Task", command=add_task)
add_task_button.pack(pady=5)

remove_task_button = tk.Button(root, text="Remove Completed Tasks", command=remove_completed_tasks)
remove_task_button.pack(pady=5)

# Run the application
root.mainloop()

